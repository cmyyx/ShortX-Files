{
  "actions": [{
    "@type": "type.googleapis.com/ExecuteMVEL",
    "expression": "// 导入 Android API\nimport android.content.Intent;\nimport android.app.ActivityOptions;\nimport android.graphics.Rect;\nimport android.app.ActivityManager;\nimport android.content.pm.PackageManager;\nimport android.view.WindowManager;\nimport android.graphics.Point;\nimport android.view.Display;\nimport android.view.Surface;\nimport android.os.UserHandle;\n\n// 初始化 output 变量\noutput \u003d \"\";\n\n// 1. 获取 ActivityManager 实例\nactivityManager \u003d context.getSystemService(\"activity\");\nif (activityManager \u003d\u003d null) {\n    output \u003d \"无法获取 ActivityManager 服务\";\n} else {\n    // 2. 获取前台应用的 RunningTaskInfo\n    tasks \u003d activityManager.getRunningTasks(1);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n        output \u003d \"无法获取前台应用的任务信息\";\n    } else {\n        // 3. 获取前台应用的包名、用户ID和当前 Activity\n        taskInfo \u003d tasks.get(0);\n        packageName \u003d taskInfo.topActivity.getPackageName();\n        userId \u003d taskInfo.userId;\n        activityName \u003d taskInfo.topActivity.getClassName();\n\n        if (packageName \u003d\u003d null || userId \u003d\u003d null || activityName \u003d\u003d null) {\n            output \u003d \"无法获取前台应用包名、用户ID或当前 Activity\";\n        } else {\n            // 4. 创建一个新的 Intent，直接启动当前 Activity\n            it \u003d new Intent();\n            it.setClassName(packageName, activityName);\n            it.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\n            // 5. 获取 WindowManager 实例\n            windowManager \u003d context.getSystemService(\"window\");\n            display \u003d windowManager.getDefaultDisplay();\n\n            // 6. 获取屏幕的物理分辨率\n            size \u003d new Point();\n            display.getRealSize(size);\n\n            // 7. 获取屏幕的物理宽度和高度\n            screenWidth \u003d size.x;\n            screenHeight \u003d size.y;\n\n            // 8. 判断屏幕方向（使用 Display.getRotation()）\n            rotation \u003d display.getRotation();\n            isPortrait \u003d rotation \u003d\u003d Surface.ROTATION_0 || rotation \u003d\u003d Surface.ROTATION_180;\n\n            // 9. 根据屏幕方向设置小窗口的宽度和边距\n            width \u003d isPortrait ? 1500 : 1300; // 竖屏 1500，横屏 1300\n            height \u003d Math.round(width / 0.58); // 高度计算，确保高度比宽度大\n\n            // 10. 设置小窗口的左上角坐标\n            left \u003d isPortrait ? 200 : 150;\n            top \u003d isPortrait ? 400 : 80; // 竖屏上边距 400，横屏上边距 80\n\n            // 11. 计算小窗口的右下角坐标\n            right \u003d left + width;\n            bottom \u003d top + height;\n\n            // 12. 创建 ActivityOptions 并设置小窗口模式\n            activityOptions \u003d ActivityOptions.makeBasic();\n            activityOptions.setLaunchWindowingMode(argOf$WindowingMode); // 使用常量值 5 代替 WINDOWING_MODE_FREEFORM\n            activityOptions.setLaunchBounds(new Rect(left, top, right, bottom));\n\n            // 13. 启动应用\n            userHandle \u003d UserHandle.of(userId);\n            if (userHandle !\u003d null) {\n                context.startActivityAsUser(it, activityOptions.toBundle(), userHandle);\n                output \u003d \"应用已启动并显示为小窗口，宽度: \" + width + \"，位置: (\" + left + \", \" + top + \")\";\n            } else {\n                output \u003d \"无法创建 UserHandle，用户ID无效\";\n            }\n        }\n    }\n}\n\n// 输出结果\noutput;",
    "customContextDataKey": {
    },
    "id": "A-37f59170-163d-41ad-b887-427181f1b4dc"
  }],
  "id": "SHARED-DA-24770123-feac-473a-8782-53f7c29be96c",
  "lastUpdateTime": "1751018596736",
  "createTime": "1751018369839",
  "author": {
    "name": "ShortX"
  },
  "title": "前台小窗3.0",
  "description": "该指令由酷安@落羽123制作，最初原代码来自酷安@hellocommi@成天睡觉，转发分享请标明出处，使用前必须确认WindowingMode值",
  "versionCode": "1",
  "parameters": [{
    "name": "WindowingMode",
    "defaultValue": "5",
    "isRequired": true,
    "comments": "ColorOS：100\n荣耀：102\n默认：5"
  }],
  "hook": {
  },
  "quit": {
  }
}
###------###
{"type":"da"}